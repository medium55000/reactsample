name: Deploy Frontend (dev/test/prod)

on:
  push:
    branches: ["dev", "test", "main"]
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-frontend.yml"  # ← 추가
  workflow_dispatch: {}

concurrency:
  group: frontend-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 브랜치 → 환경 매핑
      - name: Map branch to environment
        id: map
        shell: bash
        run: |
          set -euo pipefail
          case "${GITHUB_REF_NAME}" in
            dev)
              echo "ENV=DEV"                >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=dev"          >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=development" >> "$GITHUB_OUTPUT"
              ;;
            test)
              echo "ENV=TEST"               >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=test"         >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=test"        >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "ENV=PROD"               >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=prod"         >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=production"  >> "$GITHUB_OUTPUT"
              ;;
          esac

      # 1) GCP 인증 (레포 시크릿에 GCP_SA_KEY_DEV/TEST/PROD 가 JSON 전체로 있어야 함)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets[format('GCP_SA_KEY_{0}', steps.map.outputs.ENV)] }}

      # 2) gcloud 설치 + 프로젝트 설정
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}

      # (선택) 업로드될 파일 점검
      - name: Debug | list files to be built
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::frontend/"
          ls -la frontend || true
          echo "::endgroup::"
          for f in frontend/cloudbuild.yaml frontend/Dockerfile frontend/package.json; do
            test -f "$f" && echo "✓ $f OK" || echo "✗ $f MISSING"
          done

      # 3) Cloud Build 제출(비동기) + 상태 폴링  ← operations describe 사용 안 함!
      - name: Build & Push via Cloud Build (sync for debug)
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
          BUILD_MODE: ${{ steps.map.outputs.BUILD_MODE }}
        run: |
          set -euo pipefail
          TAG="${GITHUB_SHA}"
          gcloud builds submit frontend \
            --config=frontend/cloudbuild.yaml \
            --region="${REGION}" \
            --substitutions=_PROJECT_ID="${PROJECT_ID}",_REGION="${REGION}",_AR_REPO="${AR_REPO}",_ENV_LOWER="${ENV_LOWER}",_TAG="${TAG}",_BUILD_MODE="${BUILD_MODE}"
     
     
      # # 3) Cloud Build 제출(비동기) + 상태 폴링  ← operations describe 사용 안 함!
      # - name: Build & Push via Cloud Build (async + poll without ops describe)
      #   env:
      #     PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
      #     REGION:     ${{ secrets.GCP_REGION }}
      #     AR_REPO:    ${{ secrets.AR_REPO }}
      #     ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
      #     BUILD_MODE: ${{ steps.map.outputs.BUILD_MODE }}
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     TAG="${GITHUB_SHA}"

      #     echo "Submitting Cloud Build (async)…"
      #     OP_NAME="$(gcloud builds submit frontend \
      #       --config=frontend/cloudbuild.yaml \
      #       --region="${REGION}" \
      #       --substitutions=_PROJECT_ID="${PROJECT_ID}",_REGION="${REGION}",_AR_REPO="${AR_REPO}",_ENV_LOWER="${ENV_LOWER}",_TAG="${TAG}",_BUILD_MODE="${BUILD_MODE}" \
      #       --async \
      #       --format='value(name)' \
      #       --quiet || true)"

      #     if [[ -z "${OP_NAME:-}" ]]; then
      #       echo "✗ Failed to get Operation name from gcloud (async submit)."
      #       exit 1
      #     fi
      #     echo "Operation name: ${OP_NAME}"

      #     #operation name → 마지막 토큰이 BUILD_ID
      #     BUILD_ID="${OP_NAME##*/}"

      #     if [[ -z "${BUILD_ID:-}" ]]; then
      #       echo "✗ Failed to parse BUILD_ID from operation name."
      #       exit 1
      #     fi

      #     echo "Cloud Build ID: ${BUILD_ID}"
      #     echo "Logs URL: https://console.cloud.google.com/cloud-build/builds;region=${REGION}/${BUILD_ID}?project=${PROJECT_ID}"

      #     # 최대 12분(144 * 5s) 폴링
      #     for i in $(seq 1 144); do
      #       STATUS="$(gcloud builds describe "${BUILD_ID}" --region="${REGION}" --format='value(status)' || true)"
      #       echo "Build status: ${STATUS}"
      #       case "${STATUS}" in
      #         SUCCESS)
      #           echo "✓ Build succeeded."
      #           break
      #           ;;
      #         FAILURE|CANCELLED|TIMEOUT|EXPIRED)
      #           echo "✗ Build failed with status: ${STATUS}"
      #           echo "Logs: https://console.cloud.google.com/cloud-build/builds;region=${REGION}/${BUILD_ID}?project=${PROJECT_ID}"
      #           exit 1
      #           ;;
      #         *)
      #           sleep 5
      #           ;;
      #       esac
      #     done

      # 4) Cloud Run 배포.
      - name: Deploy to Cloud Run
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
          RUNTIME_SA: ${{ secrets[format('RUNTIME_SA_{0}', steps.map.outputs.ENV)] }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_SHA}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/frontend-${ENV_LOWER}:${TAG}"
          SERVICE="frontend-${ENV_LOWER}"

          echo "Deploying ${SERVICE} with image ${IMAGE}"
          gcloud run deploy "${SERVICE}" \
            --image="${IMAGE}" \
            --region="${REGION}" \
            --platform=managed \
            --port=8080 \
            --allow-unauthenticated \
            --service-account="${RUNTIME_SA}" \
            --quiet