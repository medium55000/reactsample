name: Deploy Frontend (dev/test/prod)

on:
  push:
    branches: ["dev", "test", "main"]
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch: {}

concurrency:
  group: frontend-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Map branch to env
        id: map
        shell: bash
        run: |
          case "${GITHUB_REF_NAME}" in
            dev)
              echo "ENV=DEV"                >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=dev"          >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=development" >> "$GITHUB_OUTPUT"
              ;;
            test)
              echo "ENV=TEST"               >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=test"         >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=test"        >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "ENV=PROD"               >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=prod"         >> "$GITHUB_OUTPUT"
              echo "BUILD_MODE=production"  >> "$GITHUB_OUTPUT"
              ;;
          esac

      # GCP 인증
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets[format('GCP_SA_KEY_{0}', steps.map.outputs.ENV)] }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}

      # Cloud Build로 빌드 (VITE_* 빌드 인자 전달)
      - name: Build & Push image via Cloud Build
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
          BUILD_MODE: ${{ steps.map.outputs.BUILD_MODE }}

          # ✅ 실제 보유 시크릿 이름과 일치 (API_BASE_URL_*)
          VITE_API_BASE_URL: ${{ secrets[format('API_BASE_URL_{0}', steps.map.outputs.ENV)] }}

          # Optional
          VITE_SENTRY_DSN:      ${{ secrets[format('VITE_SENTRY_DSN_{0}', steps.map.outputs.ENV)] }}
          VITE_PUBLIC_FLAG:     ${{ secrets[format('VITE_PUBLIC_FLAG_{0}', steps.map.outputs.ENV)] }}
          VITE_ANALYTICS_TOKEN: ${{ secrets[format('VITE_ANALYTICS_TOKEN_{0}', steps.map.outputs.ENV)] }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_SHA}"

          # 간단한 프리플라이트(값 존재 확인)
          if [ -z "${VITE_API_BASE_URL:-}" ]; then
            echo "::error::VITE_API_BASE_URL secret is missing for ${ENV_LOWER}"
            exit 1
          fi

          gcloud builds submit frontend \
            --config=frontend/cloudbuild.yaml \
            --region="${REGION}" \
            --substitutions=_PROJECT_ID="${PROJECT_ID}",_REGION="${REGION}",_AR_REPO="${AR_REPO}",_ENV_LOWER="${ENV_LOWER}",_TAG="${TAG}",_BUILD_MODE="${BUILD_MODE}",_VITE_API_BASE_URL="${VITE_API_BASE_URL}",_VITE_SENTRY_DSN="${VITE_SENTRY_DSN:-}",_VITE_ANALYTICS_TOKEN="${VITE_ANALYTICS_TOKEN:-}",_VITE_PUBLIC_FLAG="${VITE_PUBLIC_FLAG:-}"

      - name: Deploy to Cloud Run (frontend)
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
          RUNTIME_SA: ${{ secrets[format('RUNTIME_SA_{0}', steps.map.outputs.ENV)] }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_SHA}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/frontend-${ENV_LOWER}:${TAG}"
          SERVICE="frontend-${ENV_LOWER}"

          gcloud run deploy "${SERVICE}" \
            --image="${IMAGE}" \
            --region="${REGION}" \
            --platform=managed \
            --port=8080 \
            --allow-unauthenticated \
            --service-account="${RUNTIME_SA}" \
            --quiet