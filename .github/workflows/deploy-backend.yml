name: Deploy Backend (dev/test/prod)

on:
  push:
    branches: ["dev", "test", "main"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch: {}

concurrency:
  group: backend-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Map branch to env
        id: map
        shell: bash
        run: |
          case "${GITHUB_REF_NAME}" in
            dev)
              echo "ENV=DEV"               >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=dev"         >> "$GITHUB_OUTPUT"
              echo "NODE_ENV=development"  >> "$GITHUB_OUTPUT"
              ;;
            test)
              echo "ENV=TEST"              >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=test"        >> "$GITHUB_OUTPUT"
              echo "NODE_ENV=test"         >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "ENV=PROD"              >> "$GITHUB_OUTPUT"
              echo "ENV_LOWER=prod"        >> "$GITHUB_OUTPUT"
              echo "NODE_ENV=production"   >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets[format('GCP_SA_KEY_{0}', steps.map.outputs.ENV)] }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          install_components: "beta"

      # üîé ÏÇ¨Ï†Ñ Ï†êÍ≤Ä: ÌïÑÏàò ÏãúÌÅ¨Î¶ø Ï°¥Ïû¨ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ (ÎàÑÎùΩ Ïãú Î∞îÎ°ú Ïã§Ìå®Ìï¥ÏÑú ÏõêÏù∏ ÌååÏïÖ Ïâ¨ÏõÄ)
      - name: Preflight | verify required secrets
        env:
          MONGODB_URI:           ${{ secrets[format('MONGODB_URI_{0}', steps.map.outputs.ENV)] }}
          FRONTEND_URL:          ${{ secrets[format('FRONTEND_URL_{0}', steps.map.outputs.ENV)] }}
          RUNTIME_SA:            ${{ secrets[format('RUNTIME_SA_{0}', steps.map.outputs.ENV)] }}
        shell: bash
        run: |
          set -euo pipefail
          for v in MONGODB_URI FRONTEND_URL RUNTIME_SA; do
            if [ -z "${!v:-}" ]; then
              echo "Required secret $v is missing for this environment."
              exit 1
            fi
          done
          echo "‚úì All required secrets present."

      # 3) Build & Push
      - name: Build & Push image
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_SHA}"
          gcloud builds submit backend \
            --tag "${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/backend-${ENV_LOWER}:${TAG}" \
            --region "${REGION}"

      # 4) Deploy
      - name: Deploy to Cloud Run (backend)
        env:
          PROJECT_ID:  ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:      ${{ secrets.GCP_REGION }}
          AR_REPO:     ${{ secrets.AR_REPO }}
          ENV_LOWER:   ${{ steps.map.outputs.ENV_LOWER }}
          RUNTIME_SA:  ${{ secrets[format('RUNTIME_SA_{0}', steps.map.outputs.ENV)] }}
          MONGODB_URI: ${{ secrets[format('MONGODB_URI_{0}', steps.map.outputs.ENV)] }}
          NODE_ENV:    ${{ steps.map.outputs.NODE_ENV }}
          # dev/test/prod Î≥Ñ ÌîÑÎü∞Ìä∏ URLÏùÑ ÏΩ§ÎßàÎ°ú Ìï©Ï≥êÎëî ÏãúÌÅ¨Î¶ø (Ïòà: http://localhost:5173,https://frontend-dev-...)
          CORS_ALLOWED_ORIGINS: ${{ secrets[format('FRONTEND_URL_{0}', steps.map.outputs.ENV)] }}
        shell: bash
        run: |
          set -euo pipefail

          # ÏΩ§Îßà Ïù¥Ïä§ÏºÄÏù¥ÌîÑ (gcloud --set-env-vars ÏóêÏÑú ÏΩ§ÎßàÎäî ÌäπÏàòÎ¨∏Ïûê)
          SAFE_CORS="$(printf '%s' "${CORS_ALLOWED_ORIGINS}" | sed 's/,/\\,/g')"

          TAG="${GITHUB_SHA}"
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/backend-${ENV_LOWER}:${TAG}"
          SERVICE="backend-${ENV_LOWER}"

          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --service-account "${RUNTIME_SA}" \
            --cpu 1 --memory 512Mi \
            --concurrency 80 \
            --min-instances 0 --max-instances 3 \
            --timeout 300 \
            --set-env-vars MONGODB_URI="${MONGODB_URI}",NODE_ENV="${NODE_ENV}",CORS_ALLOWED_ORIGINS="${SAFE_CORS}" \
            --quiet