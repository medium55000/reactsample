name: Deploy Backend (dev/test/prod)

on:
  workflow_dispatch: {}
  push:
    branches: ["dev", "test", "main"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"   # ← 워크플로 변경도 트리거
    workflow_dispatch: {}                        # ← 수동 실행 허용.
concurrency:
  group: backend-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # .github/workflows/deploy-backend.yml  (핵심 부분만)
      - name: Map branch to environment
        id: map
        run: |
          if [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "ENV=DEV" >> $GITHUB_OUTPUT
            echo "ENV_LOWER=dev" >> $GITHUB_OUTPUT
            echo "NODE_ENV=development" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "ENV=TEST" >> $GITHUB_OUTPUT
            echo "ENV_LOWER=test" >> $GITHUB_OUTPUT
            echo "NODE_ENV=test" >> $GITHUB_OUTPUT
          else
            echo "ENV=PROD" >> $GITHUB_OUTPUT
            echo "ENV_LOWER=prod" >> $GITHUB_OUTPUT
            echo "NODE_ENV=production" >> $GITHUB_OUTPUT
          fi

      # 1) GCP 인증
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets[format('GCP_SA_KEY_{0}', steps.map.outputs.ENV)] }}

      # 2) gcloud 설치 + 프로젝트 설정
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          install_components: "beta"

      # (선택) 인증 확인
      - name: Verify gcloud auth
        run: |
          gcloud --version
          echo "ACTIVE ACCOUNT:" && gcloud auth list --filter=status:ACTIVE --format='value(account)'
          echo "PROJECT:" && gcloud config list --format='value(core.project)'

      # 필요한 API
      - name: Enable required APIs
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com iam.googleapis.com

      # 3) 백엔드 Docker 이미지 빌드 & 푸시 (변경 없음)
      - name: Build & Push Docker image
        env:
          PROJECT_ID: ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:     ${{ secrets.GCP_REGION }}
          AR_REPO:    ${{ secrets.AR_REPO }}
          ENV_LOWER:  ${{ steps.map.outputs.ENV_LOWER }}
        run: |
          TAG=${GITHUB_SHA}
          gcloud builds submit backend \
            --tag "${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/backend-${ENV_LOWER}:${TAG}" \
            --region "${REGION}"

      # 4) Cloud Run 배포 (여기만 변경).
      - name: Deploy to Cloud Run
        env:
          PROJECT_ID:  ${{ secrets[format('GCP_PROJECT_ID_{0}', steps.map.outputs.ENV)] }}
          REGION:      ${{ secrets.GCP_REGION }}
          AR_REPO:     ${{ secrets.AR_REPO }}
          ENV_LOWER:   ${{ steps.map.outputs.ENV_LOWER }}
          RUNTIME_SA:  ${{ secrets[format('RUNTIME_SA_{0}', steps.map.outputs.ENV)] }}
          MONGODB_URI: ${{ secrets[format('MONGODB_URI_{0}', steps.map.outputs.ENV)] }}
          NODE_ENV:    ${{ steps.map.outputs.NODE_ENV }}
          # (신규) CORS_ALLOWED_ORIGINS: 프런트 URL을 시크릿으로 넣어두면 좋습니다
          CORS_ALLOWED_ORIGINS: ${{ secrets[format('FRONTEND_URL_{0}', steps.map.outputs.ENV)] }}
        run: |
          TAG=${GITHUB_SHA}
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/backend-${ENV_LOWER}:${TAG}"
          SERVICE="backend-${ENV_LOWER}"

          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --service-account "${RUNTIME_SA}" \
            --cpu 1 --memory 512Mi \
            --concurrency 80 \
            --min-instances 0 --max-instances 3 \
            --set-env-vars MONGODB_URI="${MONGODB_URI}",NODE_ENV="${NODE_ENV}",CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS}" \
            --quiet